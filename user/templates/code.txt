#below are some codes I have tested through have been helpful but found something better
from itertools import groupby

def get_cart(request):
    cart = request.session.get('cart', [])
    grouped_cart = []
    for _, group in groupby(cart, key=lambda item: item.product.name):
        group_list = list(group)
        product = group_list[0].product
        quantity = sum(item.quantity for item in group_list)
        grouped_cart.append({'product': product, 'quantity': quantity})
    return grouped_cart

# on template
    {% for item in cart %}
    <div class="cart-item">
        <img src="{{ item.product.picture.url }}" alt="{{ item.product.name }}">
        <p>{{ item.product.name }}</p>
        <p>Quantity: {{ item.quantity }}</p>
    </div>
{% endfor %}


# alt for storing cart

def add_to_cart(request):
    if request.method == 'POST':
        product_id = request.POST['product_id']
        product = Product.objects.get(id=product_id)
        barcode = request.POST['barcode']
        cart = Cart(request.session)
        
        # Check if the product with the same barcode already exists in the cart
        for item in cart:
            if item['product'].barcode == barcode:
                # Update the quantity of the existing product in the cart
                item['quantity'] += 1
                messages.success(request, 'Product quantity has been updated.')
                return redirect('cart')

        # If the product with the same barcode doesn't exist, add it to the cart
        cart.add(product=product, barcode=barcode)
        messages.success(request, 'Product has been added to the cart.')
        return redirect('cart')

    else:
        return redirect('home')
# template
        {% for item in cart %}
        <tr>
          <td>{{ item.product.name }}</td>
          <td>{{ item.product.price }}</td>
          <td>{{ item.quantity }}</td>
          <td>{{ item.quantity|multiply:item.product.price }}</td>
        </tr>
      {% endfor %}
      

# rendering art items

      cart = request.session.get('cart', {})
    cart_items = []
    for product_id, item in cart.items():
        product = Product.objects.get(id=product_id)
        cart_item = {
            'product': product,
            'quantity': item['quantity']
        }
        cart_items.append(cart_item)

    grouped_cart = {}
    for _, group in groupby(cart_items, key=lambda item: item['product'].name):
        group_list = list(group)
        product = group_list[0]['product']
        quantity = sum(item['quantity'] for item in group_list)
        grouped_cart[product.name] = {'product': product, 'quantity': quantity}

    context = {'cart_items': grouped_cart.values()}

    return render(request, 'user/cart.html', context)

    # latest render
    grouped_cart_items = {}
for item in cart_items:
    product_name = item['product'].name
    if product_name not in grouped_cart_items:
        # First item with this product name; add it to the dictionary
        grouped_cart_items[product_name] = {
            'product': item['product'],
            'quantity': item['quantity'],
            'barcodes': [item['barcode']],
        }
    else:
        # Already saw a product with this name; increase quantity and add barcode
        grouped_cart_items[product_name]['quantity'] += item['quantity']
        grouped_cart_items[product_name]['barcodes'].append(item['barcode'])

# Convert the dictionary back to a list for rendering in the template
grouped_cart_list = list(grouped_cart_items.values())


<ul class="products-list product-list-in-card pl-2 pr-2">


                {% for cart_item in cart_items %}
                {{ cart_item }}

                <li class="item">

                  <div class="product-img">
                    <img src="{{ cart_item.product.picture.url }}" alt="Product Image"
                      class="img-size-50">
                  </div>

                  <div class="product-info">
                    <a href="javascript:void(0)" class="product-title">{{ cart_item.product.name }}
                      <span class="badge badge-warning float-right">Ksh {{ cart_item.product.price }}</span></a>
                    <span class="product-description">
                      {{cart_item.product.description}}


                    </span> <br>
                    <div class="row">
                      <label class="product-description pr-3 float-left">Quantity :</label>
                      <input type="text" name="quant[2]" class="disabled 0 float-right text-center rounded float-right "
                        readonly value="{{ cart_item.quantity }}" size="1" min="1" max="100">



                      <div class="input-group float-right">
                        <button type="button" class="btn btn-danger btn-sm me-1 mb-2 remove-item"
                          data-barcode-value="{{ cart_item.product.barcode }}" title="Remove item">
                          <i class="fas fa-trash"></i>
                        </button>



                      </div>

                    </div>
                  </div>

                </li>

                {% endfor %}


              </ul>

              # get the number of times each unique cart id appears for a specific user
    cart_counts = Cart.objects.filter(user=request.user).values('cart_id').annotate(count=Count('cart_id'))

    for cart in cart_counts:
    #  print(f'Cart ID: {cart["cart_id"]} - Count: {cart["count"]}')/
     count_id = {
         'Cart ID': cart["cart_id"] ,
         'Count': cart["count"]
     }

     login_required
     def create_shop(request):
         if request.method == 'POST':
             # create the user account for the shop owner
             username = request.POST['username']
             email = request.POST['email']
             password = request.POST['password']
             
             # check if the username and email are unique
             if User.objects.filter(username=username).exists():
                 messages.error(request, 'Username already taken')
                 return redirect('create_shop')
             if User.objects.filter(email=email).exists():
                 messages.error(request, 'Email already taken')
                 return redirect('create_shop')
             
             user = User.objects.create_user(username=username, email=email, password=password)
     
             # create the shop object
             name = request.POST['name']
             location = request.POST['location']
             image = request.FILES['image']
             shop = Shop.objects.create(name=name, location=location, owner=user, image=image)
     
             # generate the QR code
             qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
             qr.add_data(f"{name} - {location}")
             qr.make(fit=True)
             img = qr.make_image(fill_color="black", back_color="white")
     
             # save the QR code image to the shop object
             buffer = BytesIO()
             img.save(buffer, format='PNG')
             image_file = ContentFile(buffer.getvalue())
             filename = f"{name.replace(' ', '_')}_{location.replace(' ', '_')}.png"
             file_path = f"shop_qrcodes/{filename}"
             default_storage.save(file_path, image_file)
             shop.qr_code.save(filename, image_file)
     
             # log in the shop owner and redirect to the shop dashboard
             user = authenticate(username=username, password=password)
             if user is not None:
                 login(request, user)
                 return redirect('shop_dashboard')
             else:
                 messages.error(request, 'Invalid username or password')
                 return redirect('login')
         else:
             return render(request, 'create_shop.html')
======================================================================
 if request.method == 'POST':
             form = Shop_Form(request.POST, request.FILES)
             if form.is_valid():
                 shop = form.save()
                 data = {
                     'status':200,
                     'message':'Shop addedd successfully '
                 }
             return HttpResponse(data)
                 # redirect('shop_detail', shop.id)
         else:
             form = Shop_Form()
         return render(request, 'user/addshop.html', {'form': form})


     =============================================





     posted_value = request.GET.get('qr_input')
    if not posted_value or posted_value.strip() == '':
        result = {'message': 'Please scan valid QR code'}
    else:
        posted_value = posted_value.replace("-", " ")
        if "  " in posted_value:
            posted_value = posted_value.replace("  ", " ")
        truncated_posted_value = posted_value.title()
        try:
            # Retrieve all qr codes from the database
            shops = Shop.objects.all()

            # Compare posted value with truncated values from database
            for shop in shops:
                full_name = shop.qrcode.name.split("/")[-1].split(".")[0]
                truncated_name = full_name.split("_")[0].replace("-", " ").title() + " - " + full_name.split("_")[1].replace("-", " ").title()
                if truncated_posted_value == truncated_name.replace("  ", " "):
                    result = {
                        'success': True,
                        'message': 'Shop details retrieved successfully',
                        'exists': True,
                        'name': shop.name,
                        'image': shop.image.url,
                        # Add other attributes here as needed
                    }
                    break  # Exit the loop if a match is found

                else:
                    result = {
                        'success': False,
                        'message': 'Shop details not found',
                        'exists': False,
                    }
        except Shop.DoesNotExist:
            result = {
                'exists': False,
                'message': 'Invalid qr please scan again'
            }
    return JsonResponse(result)